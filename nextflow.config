params {
    training_data = null

    max_cpus   = 4
    max_memory = 8.GB
    use_gpu = false
    num_gpus = 2

    outdir           = "./results"
    publish_dir_mode = "copy"
    tracedir         = "${params.outdir}/pipeline_info"
}

includeConfig "conf/modules.config"

profiles {
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions      = "-u \$(id -u):\$(id -g)"
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    test  { includeConfig "conf/test.config"   }
    crick  { includeConfig "conf/crick.config" }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
    fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}